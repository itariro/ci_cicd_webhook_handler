<div class="col-lg-8 mx-auto p-3 py-md-5">
  <header class="d-flex align-items-center pb-3 mb-5 border-bottom">
    <a href="/" class="d-flex align-items-center text-dark text-decoration-none">
      <img src="img/3d.png" width="40" height="40" class="me-2" viewBox="0 0 118 94" role="img" />
      <span class="fs-4">&nbsp;<small>{{title}}</small></span>
    </a>
  </header>
  <main>

    <div class="container col-xxl-12 px-0 py-1">
      <div class="row flex-lg-row-reverse align-items-center g-5 py-5">
        <div class="col-lg-12">
          <h1 class="display-5 fw-bold lh-1 mb-3">Perfomance Overview</h1>
          <p><small>Quickly and easily get started with Bootstrap's compiled,
              production-ready<br> files with this barebones example featuring some basic
              HTML and helpful<br> links. Download all our examples to get started.</small></p>

          <div class="mb-5">

            <div class="btn-group btn-group-sm" role="group" aria-label="Basic radio toggle button group"
              id="heatmap-5-wkday">

              <input type="radio" class="btn-check" name="btnradio" id="btnradio3" onclick="yearSelected(2021)"
                autocomplete="off">
              <label class="btn btn-outline-primary" for="btnradio3">2021</label>

              <input type="radio" class="btn-check" name="btnradio" id="btnradio4" onclick="yearSelected(2022)"
                autocomplete="off" checked>
              <label class="btn btn-outline-primary" for="btnradio4">2022</label>
            </div>

            <div class="row my-4">
              <div class="col">
                <div id="heatmap-5"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="row g-5">

      <div class="container px-4 py-5" id="icon-grid">
        <h1 class="display-5 fw-bold lh-1 mb-3">Deployment History</h1>
        <hr>

        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4 py-5">
          <div class="col d-flex align-items-start">
            <div>
              <h5 class="fw-bold mb-0" id="timeLapsed">00:00:00</h5>
              <p><small>Uptime</small></p>
            </div>
          </div>
          <div class="col d-flex align-items-start">
            <div>
              <h5 class="fw-bold mb-0">{{version}}</h5>
              <p><small>Version</small></p>
            </div>
          </div>
          <div class="col d-flex align-items-start">
            <div>
              <h5 class="fw-bold mb-0">Featured title</h5>
              <p><small>Paragraph of text beneath the heading to explain the heading.</small></p>
            </div>
          </div>
          <div class="col d-flex align-items-start">
            <div>
              <h5 class="fw-bold mb-0">Featured title</h5>
              <p><small>Paragraph of text beneath the heading to explain the heading.</small></p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  <footer class="pt-2 my-5 text-muted border-top">
    <small>Created by Tariro Tobaiwa &middot; &copy; 2021</small>
  </footer>
</div>

<script>
  d3.select("p").style("color", "green");
  setInterval("timeLapsed()", 1000);
  window.onload = timeLapsed();

  var currentYear = new Date().getFullYear();
  yearSelected(currentYear);

  var selectedMonth = new Date().getMonth();

  function timeLapsed() {
    const then = moment(`{{uptime}}`);
    const now = moment().format('DD/MM/YYYY HH:mm:ss');
    const timeLapsed = moment.utc(moment(now, "DD/MM/YYYY HH:mm:ss").diff(moment(then, "DD/MM/YYYY HH:mm:ss"))).format("HH:mm:ss")
    document.getElementById("timeLapsed").innerHTML = timeLapsed;
  }

  function yearSelected(selectedYear) {
    $.ajax({
      type: "get", url:
        "https://tracksheet.co.uk/pipeline/api/incident/stats/" + selectedYear, datatype: "json", success: function
          (resp) {
          if (!resp.error) {

            var incidents = [];
            var tasks = [];
            var date_pos_track = [];

            const monthNames = ["January", "February", "March", "April", "May", "June", "July",
              "August", "September", "October", "November", "December"];

            // let's sort the incidents by date
            for (i = 0; i < resp.data.incidents.length; i++) {

              const current_date = resp.data.incidents[i].date.slice(0, 10);
              let current_count = 0;

              if (!incidents[current_date]) {
                incidents[current_date] = [];
                date_pos_track.push(current_date);
                current_count = 1;
              } else {
                current_count = incidents[current_date].count + 1;
              }

              const log = { count: parseInt(current_count), date: resp.data.incidents[i].date.slice(0, 10) };
              incidents[current_date] = log;

            }

            var sorted_incidents = [];
            for (let date_pos of date_pos_track) {
              sorted_incidents.push(incidents[date_pos]);
            }

            $("#heatmap-5").CalendarHeatmap('updateDates', []);
            $("#heatmap-5").CalendarHeatmap('appendDates', sorted_incidents);

          }
        }
    });
  }

  $("#heatmap-5").CalendarHeatmap([], {
    title: "",
    coloring: "viridis",
    legend: {
      divider: " - "
    },
    labels: {
      days: true,
      custom: {
        weekDayLabels: "dd"
      }
    }
  });


  function daysInMonth(month, year) {
    return new Date(year, month, 0).getDate();
  }

  function getMonthPos(selectedMonth) {
    const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    return monthNames.indexOf(selectedMonth);
  }

</script>